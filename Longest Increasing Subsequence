
  /*  wrong ans
    int findNumberOfLIS(vector<int>& nums) 
    {
         int n = nums.size();
    int dp[n];
    dp[0]=1;
    
    int ans=0;
    
    for(int i=0;i<n;i++)
    {
        int maxi=0;
        for(int j=0;j<i;j++)
        {
            if(nums[i]>nums[j])
            {
                maxi = max(maxi,dp[j]);
            }
        }
        
       dp[i] = maxi+1;
       if(dp[i]>ans)
       {
           ans=dp[i];
       }
        
    }
    
    return ans;
    
}
};  

focus on the definition of dp[i] in your code..
according to your code , dp[i] = length of LIS that ends at index i,
rather not length of LIS uptil index i.

Thats why we take maximum for all dp[i], so that we can find LIS ending at all indexes, and choose maximum out of it.

*/
    class Solution {
public:
    
    int findNumberOfLIS(vector<int>& nums) {
        const int n = nums.size();
        vector<int> lis(n,1);  // stores length of longest sequence till i-th position
        vector<int> count(n,1);  // stores count of longest sequence of length lis[i]
        int maxLen = 1;  // maximum length of lis
		
		// O(N^2) DP Solution
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]){
                    if(lis[j] + 1 > lis[i]){ // strictly increasing
                        lis[i] = lis[j] + 1;
                        count[i] = count[j];
                    } 
					 // this means there are more subsequences of same length ending at length lis[i]
					else if(lis[j]+1 == lis[i]){ 
                        count[i] += count[j];
                    }
                }
            }
            maxLen = max(maxLen,lis[i]);
        }
        
        int numOfLIS = 0;
        // count all the subseq of length maxLen
        for(int i=0;i<n;i++){
            if(lis[i]==maxLen)
                numOfLIS += count[i];
        }
            
        return numOfLIS;
    }
};
    
    
    
    
    
    
