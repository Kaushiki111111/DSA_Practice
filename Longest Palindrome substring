class Solution 
{
public:
        string longestPalindrome(string s)
        {
            if(s.length()< 2)
                return s;
            int max_len=1; // all substrings  of len=1 are palindromes
            int n=s.length();
            int start=0;
            int end=0;
            //odd length string
           
            
            for(int i=0;i<n-1;i++)
            {
                int l=i;
                int r=i;    //abcba 
                while(l>=0 && r<n) //should not go beyond the limits
                {
                    if(s[l]==s[r])
                    {
                        l--;r++;
                    }
                    else{
                        break;
                    }
                }
                int len=r-l-1; //a :len=1 so r-l-1
                if(len>max_len)
                {
                    max_len=len;
                    start=l+1;
                    end=r-1;
                }
                
            
            }
          //even length 
       
        {for(int p=0;p<n-1;p++)
          {
              int l=p;
              int r=p+1;  //cabbad
               while(l>=0 && r<n)
                {
                    if(s[l]==s[r])
                    {
                        l--;r++;
                    }
                    else{
                        break;
                    }
                }
                int len=r-l-1;
                if(len>max_len)
                {
                    max_len=len;
                    start=l+1;
                    end=r-1;
                }
          }  
          }
    return   s.substr(start,max_len);
        
    }
    
};
